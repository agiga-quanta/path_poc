{
  "title": "Data Mining Proof-of-Concept for Program Activity Tracking for Habitat (PATH)",
  "version": "2.0",
  "settings": {
    "pagenumber": 0,
    "editable": true,
    "fullscreenEnabled": true
  },
  "pages": [
    {
      "title": "Status & Statistics",
      "reports": [
        {
          "title": "Neo4j",
          "query": "CALL dbms.components()\n  YIELD name, versions, edition\nUNWIND versions AS version\nRETURN name, version, edition\nUNION\nRETURN 'APOC Library' AS name, apoc.version() AS version, '' AS edition\nUNION\nRETURN 'GDS Library' AS name, gds.version() as version, '' AS edition",
          "width": "4",
          "type": "table",
          "height": "3",
          "selection": {},
          "settings": {}
        },
        {
          "title": "Nodes",
          "query": "MATCH (n)\n  RETURN DISTINCT(LABELS(n)) AS node_label, COUNT(n) AS count\n    ORDER BY node_label, count DESC;\n\n\n",
          "width": "4",
          "type": "table",
          "height": "3",
          "selection": {},
          "settings": {
            "columnWidths": "[35,5]"
          }
        },
        {
          "title": "Relationships",
          "query": "MATCH (s)-[r]->(e)\n  RETURN DISTINCT([LABELS(s)[0], [l IN LABELS(e) WHERE l <> 'NAMED_ENTITY' | l][0]]) AS rel_type, COUNT(r) AS count\n    ORDER BY rel_type, count DESC;\n\n\n\n",
          "width": "4",
          "type": "table",
          "height": "3",
          "selection": {},
          "settings": {
            "columnWidths": "[35,5]"
          }
        },
        {
          "title": "",
          "query": "CALL apoc.meta.graph()\n\n\n",
          "width": "12",
          "type": "graph",
          "height": "6",
          "selection": {
            "DM1": "name",
            "DM2": "name",
            "FOOT_PRINT": "name",
            "KEY_PHRASE": "name",
            "NAMED_ENTITY": "name",
            "NE_CAUSE_OF_DEATH": "name",
            "NE_CITY": "name",
            "NE_COUNTRY": "name",
            "NE_CRIMINAL_CHARGE": "name",
            "NE_DATE": "name",
            "NE_DURATION": "name",
            "NE_IDEOLOGY": "name",
            "NE_LOCATION": "name",
            "NE_MISC": "name",
            "NE_MONEY": "name",
            "NE_NATIONALITY": "name",
            "NE_NUMBER": "name",
            "NE_ORDINAL": "name",
            "NE_ORGANIZATION": "name",
            "NE_PERCENT": "name",
            "NE_PERSON": "name",
            "NE_RELIGION": "name",
            "NE_SET": "name",
            "NE_STATE_OR_PROVINCE": "name",
            "NE_TIME": "name",
            "NE_TITLE": "name",
            "NE_URL": "name",
            "PATH": "name",
            "SENTENCE": "name",
            "WORD": "name",
            "_Neodash_Dashboard": "name"
          },
          "settings": {
            "nodePositions": {}
          }
        }
      ]
    },
    {
      "title": "Data Mining Cases",
      "reports": [
        {
          "title": "Case 1: Find Footprints",
          "query": "Look for authorizations,\n- with identifications are **17-HCAA-01501**, **17-HCAA-01357**, **17-HCAA-01169**, **16-HCAA-00219**, **17-HCAA-00176**, **15-HCAA-01305**, **14-HCAA-00498**, **16-HCAA-00582**, **17-HCAA-00086**, **17-HCAA-00033**, **18-HCAA-01357**, **17-HCAA-01438**, **17-HCAA-00066**, **17-HCAA-00058**, **17-HCAA-00009**, **16-HCAA-01754**, **16-HCAA-01734**, **16-HCAA-01736**, **16-HCAA-01612**, **16-HCAA-01721**, **17-HCAA-01168**, **17-HCAA-01046**, **14-HCAA-01999**, **14-HCAA-01998**, **14-HCAA-00904**, **14-HCAA-00932**, **14-HCAA-00902**, **14-HCAA-00292**, **17-HCAA-00985**, **17-HCAA-01087**, **17-HCAA-00808**, **17-HCAA-00940**, **17-HCAA-00961**, **17-HCAA-00963**, **15-HCAA-01266**, **18-HCAA-01381**, **18-HCAA-01379**, **18-HCAA-01287**, **18-HCAA-01235**, **18-HCAA-00950**, **18-HCAA-00808**, **18-HCAA-00852**. (This can be changed by the parameter *path_uid*.)\n- has sections (in relations of serious harm to fish) of the description containing at least one of the terms **permanent alteration**, **harmful alteration**, **disruption**, **death of fish**, **temporary alteration**, or **permanent destruction**. (This can be change by the parameter *phrases*).\n- has a foot print, e.g. *50 m2* or *30 ha*, in the same sentence where a specific term, as above, found.\n- extrating the reasons from the sentences if they match given reasons: **dredging**, **rip rap**, **riprap**, **re-sloping**, **piles**,  **realignment**,  **culvert**, **rock fill**, **fill**, **pier**, **instream pier**, **in-stream pier**, **abutment**, **berms**, **armouring**, **concrete pipe**, **extension**, **channel realignment**, **temporary infilling**, **coffer dam**, **cofferdam**, **placement of sand**, **spur**, **bank protection**, **hydraulic impact**, **dewatering**, **changes to flow**, **incidental**, **channel deepening**, **causeway**, and **construction**. (This can be changed by the *reasons* parameter.)",
          "width": "8",
          "type": "text",
          "height": "3",
          "selection": {},
          "settings": {
            "columnWidths": "[10, 5, 50]"
          },
          "parameters": ""
        },
        {
          "title": "Case 1: Set parameters",
          "query": "MERGE (n:DM1)\n    SET \n        n.dm1_impacts = apoc.convert.toJson(custom.extract_terms($dm1_impacts, $nlp_url)),\n        n.dm1_reasons = apoc.convert.toJson(custom.extract_terms($dm1_reasons, $nlp_url)),\n        n.dm1_path_uid_list = apoc.convert.toJson($dm1_path_uid_list),\n        n.dm1_path_section = 'd',\n        n.dm1_path_not_item = 'proj'\nRETURN SIZE(apoc.convert.fromJsonList(n.dm1_impacts)) AS impacts, SIZE(apoc.convert.fromJsonList(n.dm1_reasons)) AS reasons, SIZE(apoc.convert.fromJsonList(n.dm1_path_uid_list)) AS paths, n.dm1_path_section AS section, n.dm1_path_not_item AS not_item",
          "width": "4",
          "type": "table",
          "height": "3",
          "selection": {},
          "settings": {},
          "parameters": "{\"dm1_impacts\": [\"permanent alteration\", \"harmful alteration\", \"disruption\", \"death of fish\", \"temporary alteration\", \"permanent destruction\"],  \"dm1_reasons\": [\"dredging\", \"rip rap\", \"riprap\", \"re-sloping\", \"piles\",  \"realignment\",  \"culvert\", \"rock fill\", \"fill\", \"pier\", \"instream pier\", \"in-stream pier\", \"abutment\", \"berms\", \"armouring\", \"concrete pipe\", \"extension\", \"channel realignment\", \"temporary infilling\", \"coffer dam\", \"cofferdam\", \"placement of sand\", \"spur\", \"bank protection\", \"hydraulic impact\", \"dewatering\", \"changes to flow\", \"incidental\", \"channel deepening\", \"causeway\", \"construction\"], \"dm1_path_uid_list\": [\"17-HCAA-01501\", \"17-HCAA-01357\", \"17-HCAA-01169\", \"16-HCAA-00219\", \"17-HCAA-00176\", \"15-HCAA-01305\", \"14-HCAA-00498\", \"16-HCAA-00582\", \"17-HCAA-00086\", \"17-HCAA-00033\", \"18-HCAA-01357\", \"17-HCAA-01438\", \"17-HCAA-00066\", \"17-HCAA-00058\", \"17-HCAA-00009\", \"16-HCAA-01754\", \"16-HCAA-01734\", \"16-HCAA-01736\", \"16-HCAA-01612\", \"16-HCAA-01721\", \"17-HCAA-01168\", \"17-HCAA-01046\", \"14-HCAA-01999\", \"14-HCAA-01998\", \"14-HCAA-00904\", \"14-HCAA-00932\", \"14-HCAA-00902\", \"14-HCAA-00292\", \"17-HCAA-00985\", \"17-HCAA-01087\", \"17-HCAA-00808\", \"17-HCAA-00940\", \"17-HCAA-00961\", \"17-HCAA-00963\", \"15-HCAA-01266\", \"18-HCAA-01381\", \"18-HCAA-01379\", \"18-HCAA-01287\", \"18-HCAA-01235\", \"18-HCAA-00950\", \"18-HCAA-00808\", \"18-HCAA-00852\"], \"dm1_path_section\": \"d\", \"dm1_path_not_item\": \"proj\", \"nlp_url\": \"http://stanford_nlp:9000/?properties={'outputFormat':'json'}\"}"
        },
        {
          "title": "Case 2: Dates extraction",
          "query": "Extracting dates (and time-related entities) from section 5 of each given authorization.",
          "width": "8",
          "type": "text",
          "height": "3",
          "selection": {},
          "settings": {
            "columnWidths": "[10, 5, 50]"
          },
          "parameters": ""
        },
        {
          "title": "Case 2: Set parameters",
          "query": "MERGE (n:DM2)\n    SET \n        n.dm2_doc_uid = $dm2_doc_uid,\n        n.dm_2_doc_section = $dm_2_doc_section,\n        n.dm2_doc_section_item = $dm2_doc_section_item\nRETURN n.dm2_doc_uid AS uid_starts_with, n.dm_2_doc_section AS path_section, n.dm2_doc_section_item AS item",
          "width": "4",
          "type": "table",
          "height": "3",
          "selection": {},
          "settings": {
            "columnWidths": "[15,15,15]"
          },
          "parameters": "{\"dm2_doc_uid\": \"17\", \"dm_2_doc_section\": \"c\", \"dm2_doc_section_item\": \"5.\"}"
        }
      ]
    },
    {
      "title": "Case 1: Find Footprints",
      "reports": [
        {
          "title": "Total",
          "query": "MATCH (n:DM1)\nWITH apoc.convert.fromJsonList(n.dm1_impacts) AS impacts, apoc.convert.fromJsonList(n.dm1_reasons) AS reasons, apoc.convert.fromJsonList(n.dm1_path_uid_list) AS path_uid_list, n.dm1_path_section AS path_section, n.dm1_path_not_item AS path_not_item\n    MATCH (doc:PATH)-[r:HAS_SENTENCE {section: path_section}]-(sentence:SENTENCE)\n        WHERE doc.uid IN path_uid_list AND r.item <> path_not_item\nWITH impacts, reasons, doc, sentence \n    MATCH (sentence)-[:HAS_FOOT_PRINT]->(foot_print:FOOT_PRINT),\n    (sentence)-[:HAS_KEY_PHRASE]->(key_phrase:KEY_PHRASE)-[:HAS_WORD]->(kword:WORD),\n    (sentence)-[:HAS_KEY_PHRASE]->(reason_phrase:KEY_PHRASE)-[:HAS_WORD]->(rword:WORD)\nWITH impacts, reasons, doc, sentence, foot_print, key_phrase, reason_phrase,\n    COLLECT(kword.lemma) AS kwords, COLLECT(rword.lemma) AS rwords\n    WHERE ANY(term IN impacts WHERE apoc.coll.containsAll(kwords, term))\n    AND ANY(term IN reasons WHERE apoc.coll.containsAll(rwords, term))\nRETURN COUNT(DISTINCT(doc))",
          "width": 3,
          "type": "value",
          "height": 3,
          "selection": {},
          "settings": {},
          "parameters": "{}"
        },
        {
          "title": "Foot prints and terms",
          "query": "MATCH (n:DM1)\nWITH apoc.convert.fromJsonList(n.dm1_impacts) AS impacts, apoc.convert.fromJsonList(n.dm1_reasons) AS reasons, apoc.convert.fromJsonList(n.dm1_path_uid_list) AS path_uid_list, n.dm1_path_section AS path_section, n.dm1_path_not_item AS path_not_item\n    MATCH (doc:PATH)-[r:HAS_SENTENCE {section: path_section}]-(sentence:SENTENCE)\n        WHERE doc.uid IN path_uid_list AND r.item <> path_not_item\nWITH impacts, reasons, doc, sentence \n    MATCH (sentence)-[:HAS_FOOT_PRINT]->(foot_print:FOOT_PRINT),\n    (sentence)-[:HAS_KEY_PHRASE]->(key_phrase:KEY_PHRASE)-[:HAS_WORD]->(kword:WORD),\n    (sentence)-[:HAS_KEY_PHRASE]->(reason_phrase:KEY_PHRASE)-[:HAS_WORD]->(rword:WORD)\nWITH impacts, reasons, doc, sentence, foot_print, key_phrase, reason_phrase,\n    COLLECT(kword.lemma) AS kwords, COLLECT(rword.lemma) AS rwords\n    WHERE ANY(term IN impacts WHERE apoc.coll.containsAll(kwords, term))\n    AND ANY(term IN reasons WHERE apoc.coll.containsAll(rwords, term))\nRETURN doc.uid, sentence.text AS sentence, foot_print.text AS foot_print,\n    COLLECT(DISTINCT(key_phrase.text)) AS key_phrases, COLLECT(DISTINCT(reason_phrase.text)) AS reason_phrases",
          "width": "9",
          "type": "table",
          "height": "6",
          "selection": {},
          "settings": {
            "columnWidths": "[5, 20, 15, 20, 20]"
          },
          "parameters": "{}"
        },
        {
          "title": "Project Locations",
          "query": "MATCH (n:DM1)\nWITH apoc.convert.fromJsonList(n.dm1_impacts) AS impacts, apoc.convert.fromJsonList(n.dm1_reasons) AS reasons, apoc.convert.fromJsonList(n.dm1_path_uid_list) AS path_uid_list, n.dm1_path_section AS path_section, n.dm1_path_not_item AS path_not_item\n    MATCH (doc:PATH)-[r:HAS_SENTENCE {section: path_section}]-(sentence:SENTENCE)\n        WHERE doc.uid IN path_uid_list AND r.item <> path_not_item\nWITH impacts, reasons, doc, sentence \n    MATCH (sentence)-[:HAS_FOOT_PRINT]->(foot_print:FOOT_PRINT),\n    (sentence)-[:HAS_KEY_PHRASE]->(key_phrase:KEY_PHRASE)-[:HAS_WORD]->(kword:WORD),\n    (sentence)-[:HAS_KEY_PHRASE]->(reason_phrase:KEY_PHRASE)-[:HAS_WORD]->(rword:WORD)\nWITH impacts, reasons, doc, sentence, foot_print, key_phrase, reason_phrase,\n    COLLECT(kword.lemma) AS kwords, COLLECT(rword.lemma) AS rwords\n    WHERE ANY(term IN impacts WHERE apoc.coll.containsAll(kwords, term))\n    AND ANY(term IN reasons WHERE apoc.coll.containsAll(rwords, term))\nRETURN DISTINCT(doc) AS doc\n\n\n",
          "width": "12",
          "type": "map",
          "height": "6",
          "selection": {
            "PATH": "project_nearest_community"
          },
          "settings": {},
          "parameters": "{}"
        }
      ]
    },
    {
      "title": "Case 2: Date extractions",
      "reports": [
        {
          "title": "Total",
          "query": "MATCH (n:DM2)\nWITH n.dm2_doc_uid AS dm2_doc_uid, n.dm_2_doc_section AS dm2_doc_section, n.dm2_doc_section_item AS dm2_doc_section_item\nMATCH (doc:PATH)-[r:HAS_SENTENCE {section: dm2_doc_section}]-(sentence:SENTENCE)\n    WHERE doc.uid STARTS WITH dm2_doc_uid AND r.item STARTS WITH dm2_doc_section_item\nWITH doc, sentence, r.item AS item\n    MATCH (sentence)-[:HAS_NAMED_ENTITY]->(date:NE_DATE)\nRETURN COUNT(DISTINCT(doc.uid))\n\n\n\n\n",
          "width": 3,
          "type": "value",
          "height": 3,
          "selection": {},
          "settings": {}
        },
        {
          "title": "Dates extracted from section 5",
          "query": "MATCH (n:DM2)\nWITH n.dm2_doc_uid AS dm2_doc_uid, n.dm_2_doc_section AS dm2_doc_section, n.dm2_doc_section_item AS dm2_doc_section_item\nMATCH (doc:PATH)-[r:HAS_SENTENCE {section: dm2_doc_section}]-(sentence:SENTENCE)\n    WHERE doc.uid STARTS WITH dm2_doc_uid AND r.item STARTS WITH dm2_doc_section_item\nWITH doc, sentence, r.item AS item\n    MATCH (sentence)-[:HAS_NAMED_ENTITY]->(date:NE_DATE)\nWITH doc, item, COLLECT(date.text) AS dates\nRETURN doc.uid AS doc_uid, item, dates ORDER BY doc_uid, item ASC;\n",
          "width": "9",
          "type": "table",
          "height": "3",
          "selection": {},
          "settings": {
            "columnWidths": "[10,5,50]"
          },
          "parameters": ""
        }
      ]
    }
  ]
}